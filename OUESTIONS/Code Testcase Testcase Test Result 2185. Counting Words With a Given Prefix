You are given an array of strings words and a string pref.

Return the number of strings in words that contain pref as a prefix.

A prefix of a string s is any leading contiguous substring of s.

 

Example 1:

Input: words = ["pay","attention","practice","attend"], pref = "at"
Output: 2
Explanation: The 2 strings that contain "at" as a prefix are: "attention" and "attend".
Example 2:

Input: words = ["leetcode","win","loops","success"], pref = "code"
Output: 0
Explanation: There are no strings that contain "code" as a prefix.
 

Constraints:

1 <= words.length <= 100
1 <= words[i].length, pref.length <= 100
words[i] and pref consist of lowercase English letters.

//code------------------------------------------------------------------------------------------------->


class Solution {
public:
    int first_method(vector<string>& words, string pref){
        int ans=0;
        for(int i=0;i<words.size();i++){
            string p=words[i];
            for(int j=0;j<pref.size();j++){
                if(pref.size()==j+1 && pref[j]==p[j]){
                    ans++;
                    break;
                }
                if(pref[j]!=p[j]){
                    break;
                }

            }
        }

        return ans;
    }

    int second_method(vector<string>& words, string pref){
        int ans=0;
        for(auto &word:words){
            if(word.starts_with(pref)){
                ans++;
            }
        }

        return ans;
    }
    int prefixCount(vector<string>& words, string pref) {
        //return first_method(words,pref);
        return second_method(words,pref);
    }
};
