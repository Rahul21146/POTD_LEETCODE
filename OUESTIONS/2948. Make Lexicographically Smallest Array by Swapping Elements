/*
You are given a 0-indexed array of positive integers nums and a positive integer limit.

In one operation, you can choose any two indices i and j and swap nums[i] and nums[j] if |nums[i] - nums[j]| <= limit.

Return the lexicographically smallest array that can be obtained by performing the operation any number of times.

An array a is lexicographically smaller than an array b if in the first position where a and b differ, array a has an element that is less than the corresponding element in b. For example, the array [2,10,3] is lexicographically smaller than the array [10,2,3] because they differ at index 0 and 2 < 10.

 

Example 1:

Input: nums = [1,5,3,9,8], limit = 2
Output: [1,3,5,8,9]
Explanation: Apply the operation 2 times:
- Swap nums[1] with nums[2]. The array becomes [1,3,5,9,8]
- Swap nums[3] with nums[4]. The array becomes [1,3,5,8,9]
We cannot obtain a lexicographically smaller array by applying any more operations.
Note that it may be possible to get the same result by doing different operations.
Example 2:

Input: nums = [1,7,6,18,2,1], limit = 3
Output: [1,6,7,18,1,2]
Explanation: Apply the operation 3 times:
- Swap nums[1] with nums[2]. The array becomes [1,6,7,18,2,1]
- Swap nums[0] with nums[4]. The array becomes [2,6,7,18,1,1]
- Swap nums[0] with nums[5]. The array becomes [1,6,7,18,1,2]
We cannot obtain a lexicographically smaller array by applying any more operations.
Example 3:

Input: nums = [1,7,28,19,10], limit = 3
Output: [1,7,28,19,10]
Explanation: [1,7,28,19,10] is the lexicographically smallest array we can obtain because we cannot apply the operation on any two indices.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
1 <= limit <= 109


*/

/*class Solution {
public:
    vector<int> lexicographicallySmallestArray(vector<int>& nums, int limit) {
        int n = nums.size();
        for (int i = 0; i < n - 1;) {
            bool swapped = false;
            
            for (int j = i + 1; j < n; j++) {
                if (nums[i] > nums[j] && abs(nums[i] - nums[j]) <= limit) {
                    swap(nums[i], nums[j]);
                    swapped = true;
                    break; // Stop at the first valid swap for lexicographical order
                }
            }
            
            if (!swapped) {
                i++; // Only move to the next index if no valid swap occurred
            }
        }
        return nums;
    }
};*/


class Solution {
public:
    vector<int> lexicographicallySmallestArray(vector<int>& nums, int limit) {
        int n = nums.size();
        vector<pair<int, int>> vec(n);

        // Making (element, index) pair
        for(int i = 0; i<n; i++)
        {
            vec[i].first = nums[i];
            vec[i].second = i;
        }
        int low = 0;

        // Sorting according to element
        sort(vec.begin(), vec.end());

        // Making new vector for storing and sorting indices
        vector<int> new_sorting(n);
        new_sorting [0] = vec[0].second;


        for(int i = 1; i<n; i++)
        {
            if(abs(vec[i].first-vec[i-1].first)>limit)
            {
                sort(new_sorting.begin() + low, new_sorting.begin() + i);
                low = i;
                // If difference between current and
                // previous element is greater than limit,
                // we will sort indices before it and make
                // current element new low
            }
            new_sorting [i] = vec[i].second;
        }
        sort(new_sorting.begin() + low, new_sorting.end());
        vector<int> ans(n);

        // filling in answer according to our new sorted index
        for(int i = 0; i<n; i++)
        {
            ans[new_sorting[i]] = vec[i].first;
        }

        return ans;
    }
};
