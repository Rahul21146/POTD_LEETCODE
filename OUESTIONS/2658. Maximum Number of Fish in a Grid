/*

You are given a 0-indexed 2D matrix grid of size m x n, where (r, c) represents:

A land cell if grid[r][c] = 0, or
A water cell containing grid[r][c] fish, if grid[r][c] > 0.
A fisher can start at any water cell (r, c) and can do the following operations any number of times:

Catch all the fish at cell (r, c), or
Move to any adjacent water cell.
Return the maximum number of fish the fisher can catch if he chooses his starting cell optimally, or 0 if no water cell exists.

An adjacent cell of the cell (r, c), is one of the cells (r, c + 1), (r, c - 1), (r + 1, c) or (r - 1, c) if it exists.

 

Example 1:


Input: grid = [[0,2,1,0],[4,0,0,3],[1,0,0,4],[0,3,2,0]]
Output: 7
Explanation: The fisher can start at cell (1,3) and collect 3 fish, then move to cell (2,3) and collect 4 fish.
Example 2:


Input: grid = [[1,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,1]]
Output: 1
Explanation: The fisher can start at cells (0,0) or (3,3) and collect a single fish. 
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 10
0 <= grid[i][j] <= 10

*/


class Solution {
public:
    // Perform BFS to calculate the total fish in a connected component
    void bfs(int i, int j, int n, int m, vector<vector<bool>>& vis, vector<vector<int>>& grid, int& max_ans) {
        queue<pair<int, int>> q;
        q.push({i, j});
        vis[i][j] = true; // Mark the starting cell as visited

        int total_fish = 0;

        // Possible directions for moving in the grid (up, down, left, right)
        vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        while (!q.empty()) {
            auto [x, y] = q.front();
            q.pop();

            total_fish += grid[x][y]; // Collect fish at this cell

            // Explore all 4 possible directions
            for (auto [dx, dy] : directions) {
                int nx = x + dx;
                int ny = y + dy;

                // Check bounds and if the cell is unvisited and contains fish
                if (nx >= 0 && nx < n && ny >= 0 && ny < m && !vis[nx][ny] && grid[nx][ny] > 0) {
                    q.push({nx, ny});
                    vis[nx][ny] = true;
                }
            }
        }

        // Update the maximum fish collected
        max_ans = max(max_ans, total_fish);
    }

    int findMaxFish(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int max_ans = 0; // Initialize maximum fish as 0
        vector<vector<bool>> vis(n, vector<bool>(m, false)); // Visited array

        // Iterate through all cells of the grid
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // If the cell contains fish and is not yet visited
                if (grid[i][j] > 0 && !vis[i][j]) {
                    bfs(i, j, n, m, vis, grid, max_ans); // Perform BFS
                }
            }
        }

        return max_ans;
    }
};
