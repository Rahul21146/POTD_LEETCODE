/*

Given an m x n binary matrix mat, return the distance of the nearest 0 for each cell.

The distance between two cells sharing a common edge is 1.

 

Example 1:


Input: mat = [[0,0,0],[0,1,0],[0,0,0]]
Output: [[0,0,0],[0,1,0],[0,0,0]]
Example 2:


Input: mat = [[0,0,0],[0,1,0],[1,1,1]]
Output: [[0,0,0],[0,1,0],[1,2,1]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
mat[i][j] is either 0 or 1.
There is at least one 0 in mat.
 

Note: This question is the same as 1765: https://leetcode.com/problems/map-of-highest-peak/

*/


class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& grid) {
        int n= grid.size();
        int m = grid[0].size();
        vector<vector<int>>ans(n, vector<int>(m));
        vector<vector<bool>>vis(n, vector<bool>(m,false));
        queue<pair<pair<int,int>,int>> q;
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]==0){
                    q.push({{i,j},0});
                    vis[i][j]=true;
                }
            }
        }
       int d1[] = {1,0,-1,0};
       int d2[] = {0,1,0,-1};
        while(!q.empty()){
            auto frontpair=q.front();
            q.pop();
            
            int row = frontpair.first.first;
            int col = frontpair.first.second;
            int count = frontpair.second;
            
            ans[row][col] = count;
            
            for(int i=0; i<4; i++){
                int newrow = row+d1[i];
                int newcol = col+d2[i];
                if(newrow<n && newrow>= 0 && newcol<m && newcol >=0 && vis[newrow][newcol]==false){
                    q.push({{newrow,newcol},count+1});
                    vis[newrow][newcol]=true;
                }
            }
            
        }
        
        
        
        return ans;
    }
};
